generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Owner {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String                 @unique
  externalId           String                 @unique
  contactNumber        BigInt?
  adharNumber          BigInt?
  adharImage           String?
  numberOfProperties   Int?                   @default(0)
  totalRevenue         Float?                 @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Maintainence_Support Maintainence_Support[]
  payments             Payments[]
  properties           Property[]             @relation("OwnerProperties")
  PropertyRequest      PropertyRequest[]
}

model Tenant {
  id                  String                 @id @default(cuid())
  name                String?
  email               String                 @unique
  externalId          String                 @unique
  contactNumber       BigInt?
  adharNumber         BigInt?
  adharImage          String?
  workingArea         String?
  tenantStatus        TenantStatus?
  rentPaymentType     RentPayment            @default(MONTHLY)
  leaseStart          DateTime?
  leaseEnd            DateTime?
  rentAmount          Float?
  leaseExtension      LeaseExtension         @default(INCREASE)
  leaseContract       String?
  rentedPropertyId    String?
  propertyId          String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  maintenanceRequests Maintainence_Support[]
  payments            Payments[]
  rentedProperty      Property[]
  PropertyRequest     PropertyRequest[]
  rents               Rent[]
  supportTickets      Support_Tickets[]
}

model Property {
  id                  String                 @id @default(cuid())
  name                String
  address             String
  area                String
  state               String
  zipCode             Int
  images              String[]
  personLimit         Int
  propertyStatus      PropertyStatus         @default(EMPTY)
  rentAmount          Int
  depositAmount       Int
  leaseDocuments      String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  ownerId             String
  tenantId            String?
  city                String
  maintenanceRequests Maintainence_Support[]
  owner               Owner                  @relation("OwnerProperties", fields: [ownerId], references: [id], onDelete: Cascade)
  Tenant              Tenant?                @relation(fields: [tenantId], references: [id])
  PropertyRequest     PropertyRequest[]
  rents               Rent[]
  Support_Tickets     Support_Tickets[]

  @@index([ownerId])
  @@index([tenantId])
}

model Payments {
  id            String        @id @default(cuid())
  ownerId       String?
  tenantId      String?
  amount        Float
  date          DateTime      @default(now())
  paymentStatus PaymentStatus @default(UNPAID)
  createdAt     DateTime      @default(now())
  owner         Owner?        @relation(fields: [ownerId], references: [id])
  tenant        Tenant?       @relation(fields: [tenantId], references: [id])
}

model Rent {
  id         String     @id @default(cuid())
  tenantId   String
  amount     Float
  date       DateTime   @default(now())
  propertyId String?
  rentStatus RentStatus @default(PENDING)
  createdAt  DateTime   @default(now())
  Property   Property?  @relation(fields: [propertyId], references: [id])
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
}

model Maintainence_Support {
  id          String        @id @default(cuid())
  propertyId  String
  tenantId    String
  title       String
  image       String[]
  description String
  status      Ticket_Status @default(OPEN)
  createdAt   DateTime      @default(now())
  ownerId     String
  owner       Owner         @relation(fields: [ownerId], references: [id])
  property    Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenant      Tenant        @relation(fields: [tenantId], references: [id])
}

model Support_Tickets {
  id          String         @id @default(cuid())
  tenantId    String?
  propertyId  String?
  status      Ticket_Status? @default(OPEN)
  subject     String
  description String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  property    Property?      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenant      Tenant?        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, propertyId])
}

model PropertyRequest {
  id         String        @id @default(cuid())
  tenantId   String
  propertyId String
  status     RequestStatus
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  ownerId    String
  owner      Owner         @relation(fields: [ownerId], references: [id])
  property   Property      @relation(fields: [propertyId], references: [id])
  tenant     Tenant        @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, propertyId, id])
}

enum RentStatus {
  PAID
  PENDING
  OVERDUE
}

enum TenantStatus {
  STUDENT
  WORKING_PROFESSIONAL
  FAMILY
  SELF_EMPLOYED
}

enum RentPayment {
  MONTHLY
  QUARTERLY
  ANNUAL
}

enum LeaseExtension {
  INCREASE
  TERMINATE
}

enum PropertyStatus {
  RENTED
  EMPTY
}

enum Ticket_Status {
  OPEN
  IN_PROGRESS
  RESOLVED
}

enum PaymentStatus {
  PAID
  UNPAID
  OVERDUE
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
